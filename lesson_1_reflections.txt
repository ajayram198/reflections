How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    diff helped me to check which lines were different, and with that I was able to spot the bug the typo.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Access to the history allows* You may forget to commit when you should do it. us to revert to old versions, this is useful in a project if you need to go 
	Back to old version of the code.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros
	You can commit after a Logical section ends (like fixing typos, fixing bugs etc)
	There will be less no of commits when compred to automatically saved commits
    Cons
	You may forget to commit after a major change has been made.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git is more programmatically oriented. so changing one file may change other files too, while that is not the case with Google Docs
which is just a collection of unconnected files.

How can you use the commands git log and git diff to view the history of files?

   Git log gives the entire record of git commits, and git diff between any two commit ids gives us what lines were inserted and deleted
between the two commits.

How might using version control make you more confident to make changes that
could break something?

    Version control allows you to create and change code without the fear that incasse it fails, you can always revert to the old version.

Now that you have your workspace set up, what do you want to try using Git for?

   Version control for my Machine learning code projects
